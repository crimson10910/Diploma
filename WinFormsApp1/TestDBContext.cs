// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WinFormsApp1
{
    public partial class TestDBContext : DbContext
    {
        public TestDBContext()
        {
        }

        public TestDBContext(DbContextOptions<TestDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<ConsigmentNote> ConsigmentNotes { get; set; }
        public virtual DbSet<Engine> Engines { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Mark> Marks { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrederStatus> OrederStatuses { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<SrviceList> SrviceLists { get; set; }
        public virtual DbSet<Transmission> Transmissions { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=HONING;Initial Catalog=CarServiceRaios;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Color>(entity =>
            {
                entity.HasKey(e => e.id_Color);

                entity.Property(e => e.id_Color).ValueGeneratedNever();

                entity.Property(e => e.ColorName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColorPic)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConsigmentNote>(entity =>
            {
                entity.HasKey(e => new { e.id_Order, e.id_Product });

                entity.Property(e => e.Count).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.id_OrderNavigation)
                    .WithMany(p => p.ConsigmentNotes)
                    .HasForeignKey(d => d.id_Order)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsigmentNotes_Orders");

                entity.HasOne(d => d.id_Order1)
                    .WithMany(p => p.ConsigmentNotes)
                    .HasForeignKey(d => d.id_Order)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsigmentNotes_Products");
            });

            modelBuilder.Entity<Engine>(entity =>
            {
                entity.HasKey(e => e.id_Engine);

                entity.Property(e => e.id_Engine).ValueGeneratedNever();

                entity.Property(e => e.EngineName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.HasKey(e => e.id_Gender);

                entity.Property(e => e.id_Gender).ValueGeneratedNever();

                entity.Property(e => e.GenderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mark>(entity =>
            {
                entity.HasKey(e => e.id_Mark);

                entity.Property(e => e.id_Mark).ValueGeneratedNever();

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.id_Order);

                entity.Property(e => e.id_Order).ValueGeneratedNever();

                entity.Property(e => e.ComplDate).HasColumnType("date");

                entity.Property(e => e.RegDate).HasColumnType("date");

                entity.HasOne(d => d.id_OrderStatusNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.id_OrderStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_OrederStatuses");

                entity.HasOne(d => d.id_PaymentTypeNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.id_PaymentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_PaymentTypes");

                entity.HasOne(d => d.id_PersonNavigation)
                    .WithMany(p => p.Orderid_PersonNavigations)
                    .HasForeignKey(d => d.id_Person)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Persons");

                entity.HasOne(d => d.id_SellerNavigation)
                    .WithMany(p => p.Orderid_SellerNavigations)
                    .HasForeignKey(d => d.id_Seller)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Persons1");
            });

            modelBuilder.Entity<OrederStatus>(entity =>
            {
                entity.HasKey(e => e.id_OrederStatuse);

                entity.Property(e => e.id_OrederStatuse).ValueGeneratedNever();

                entity.Property(e => e.OrederStatuseName)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.HasKey(e => e.id_PaymentType);

                entity.Property(e => e.id_PaymentType).ValueGeneratedNever();

                entity.Property(e => e.PaymentTypeName)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.id_Person);

                entity.Property(e => e.id_Person).ValueGeneratedNever();

                entity.Property(e => e.BDay).HasColumnType("date");

                entity.Property(e => e.EMail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Login)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Patronimic)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SureName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.id_GenderNavigation)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.id_Gender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Persons_Genders");

                entity.HasOne(d => d.id_RoleNavigation)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.id_Role)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Persons_Roles");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.id_Product);

                entity.Property(e => e.id_Product).ValueGeneratedNever();

                entity.Property(e => e.ProductDiscription)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductPicture)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ProductPrice).HasColumnType("numeric(10, 2)");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.id_Role);

                entity.Property(e => e.id_Role).ValueGeneratedNever();

                entity.Property(e => e.RoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasKey(e => e.id_Service);

                entity.Property(e => e.id_Service).ValueGeneratedNever();

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServicePrice).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<SrviceList>(entity =>
            {
                entity.HasKey(e => new { e.id_Order, e.id_Services });

                entity.ToTable("SrviceList");

                entity.HasOne(d => d.id_OrderNavigation)
                    .WithMany(p => p.SrviceLists)
                    .HasForeignKey(d => d.id_Order)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SrviceList_Orders");

                entity.HasOne(d => d.id_PersonNavigation)
                    .WithMany(p => p.SrviceLists)
                    .HasForeignKey(d => d.id_Person)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SrviceList_Persons");

                entity.HasOne(d => d.id_ServicesNavigation)
                    .WithMany(p => p.SrviceLists)
                    .HasForeignKey(d => d.id_Services)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SrviceList_Services");
            });

            modelBuilder.Entity<Transmission>(entity =>
            {
                entity.HasKey(e => e.id_Transmission);

                entity.Property(e => e.id_Transmission).ValueGeneratedNever();

                entity.Property(e => e.TransmissionName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.HasKey(e => e.id_Vehicle);

                entity.Property(e => e.id_Vehicle).ValueGeneratedNever();

                entity.Property(e => e.Model)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegMumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.HasOne(d => d.id_ColorNavigation)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.id_Color)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Colors");

                entity.HasOne(d => d.id_EngineNavigation)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.id_Engine)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Engines");

                entity.HasOne(d => d.id_MarkNavigation)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.id_Mark)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Marks");

                entity.HasOne(d => d.id_PersonNavigation)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.id_Person)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Persons");

                entity.HasOne(d => d.id_TransmissionNavigation)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.id_Transmission)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicles_Transmissions");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}